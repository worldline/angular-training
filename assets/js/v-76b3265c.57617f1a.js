"use strict";(self.webpackChunkangular_training=self.webpackChunkangular_training||[]).push([[78],{3627:(n,s,a)=>{a.r(s),a.d(s,{default:()=>S});var e=a(6252),t=a(5182),o=a(9868),p=a(2984),i=a(9589);const l=(0,e.uE)('<h1 id="first-steps" tabindex="-1"><a class="header-anchor" href="#first-steps" aria-hidden="true">#</a> First steps</h1><p>We have just used the Angular CLI command <code>ng new &lt;my-project&gt;</code>. This command creates a workspace with a root-level application named <em>my-project</em> and installs the necessary Angular npm packages in the new workspace. The workspace root folder contains various support and configuration files.</p><p>Creating an initial skeleton application at the root level of the workspace along with its end-to-end tests is the default behaviour of the <code>ng new</code> command. This behaviour is suitable for a <strong>multi-repo</strong> development style where each application resides in its own workspace. It is also the recommended way for beginner and intermediate users.</p><p>Angular also supports workspaces with multiple projects. This is appropriate for a <strong>monorepo</strong> development style where there is a single repository and a global configuration for all Angular projects in it. It is also suitable for advanced users who are, for instance, developing shareable libraries.</p><p>To get started developing with a multi-project workspace, the initial root-level application generation should be skipped.</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>ng new my-workspace --create-application <span class="token boolean">false</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>You can then generate apps and libraries with names that are unique within the workspace.</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> my-workspace\nng generate application my-first-app\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Generated applications go into the <code>projects/</code> folder instead of a top-level <code>src</code> folder.</p><h2 id="file-structure" tabindex="-1"><a class="header-anchor" href="#file-structure" aria-hidden="true">#</a> File structure</h2><p>Our previously created project has the following folders and files:</p><ul><li><code>tsconfig.json</code>: the base TypeScript configuration for projects in the workspace</li><li><code>tsconfig.app.json</code>: the root application TypeScript configuration file which inherits from the base one</li><li><code>tsconfig.spec.json</code>: the e2e tests TypeScript configuration file which inherits from the base one</li><li><code>README.md</code>: introductory documentation for the root app</li><li><code>package.json</code>: configures npm package dependencies that are available to all projects in the workspace</li><li><code>package-lock.json</code>: provides version information for all packages installed into node_modules by the npm client</li><li><code>angular.json</code>: CLI configuration, including configuration options for build, serve, and test tools that the CLI uses</li><li><code>.gitignore</code>: Specifies intentionally untracked files that Git should ignore</li><li><code>.editorconfig</code>: Configuration for code editors</li><li><code>src</code>: Source files for the root-level application project</li><li><code>node_modules</code>: Provides npm packages to the entire workspace</li><li><code>public</code>: Contains the favicon initially and is the place for images and other asset files to be copied as-is when you build your application</li><li><code>.angular</code>: Cache files</li></ul>',12),c={class:"custom-container tip"},r=(0,e._)("p",{class:"custom-container-title"},"TIP",-1),d={href:"https://docs.npmjs.com/cli/v7/configuring-npm/package-json#dependencies",target:"_blank",rel:"noopener noreferrer"},u=(0,e._)("code",null,"package.json",-1),h=(0,e.uE)('<p>The <code>src</code> folder contains:</p><ul><li><code>styles.scss</code>: Lists CSS files that supply styles for a project. The extension reflects the style preprocessor you have configured for the project.</li><li><code>main.ts</code>: The main entry point for your application</li><li><code>index.html</code>: The main HTML page that is served when someone visits your site. The CLI automatically adds all JavaScript and CSS files when building your app, so you typically don&#39;t need to add any <code>&lt;script&gt;</code> or <code>&lt;link&gt;</code> tags here manually.</li><li><code>app</code>: Contains the component files in which your application logic and data are defined</li></ul><p>The <code>app</code> folder contains:</p><ul><li><code>app.config.ts</code>: Defines the application configuration that tells Angular how to assemble the application.</li><li><code>app.routes.ts</code>: Defines the application&#39;s routing configuration</li><li><code>app.html</code>: Defines the HTML template associated with the root <code>App</code> component.</li><li><code>app.scss</code>: Defines the base stylesheet for the root <code>App</code> component.</li><li><code>app.ts</code>: Defines the logic for the app&#39;s root component, named <code>App</code>. The view associated with this root component is the root of the view hierarchy.</li><li><code>app.spec.ts</code>: Defines a unit test for the root <code>App</code> component.</li></ul><h2 id="text-interpolation-in-templates" tabindex="-1"><a class="header-anchor" href="#text-interpolation-in-templates" aria-hidden="true">#</a> Text interpolation in templates</h2><p>Like any other component, the shell <code>App</code> component is distributed over three files. Open the component typescript file (<code>app.ts</code>) and change the value of the title property to &#39;Search films&#39;</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// app.component.ts</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Component<span class="token punctuation">,</span> signal <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@angular/core&#39;</span>\n\n<span class="token decorator"><span class="token at operator">@</span><span class="token function">Component</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  selector<span class="token operator">:</span> <span class="token string">&#39;app-root&#39;</span><span class="token punctuation">,</span>\n  templateUrl<span class="token operator">:</span> <span class="token string">&#39;./app.html&#39;</span><span class="token punctuation">,</span>\n  styleUrls<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;./app.scss&#39;</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token punctuation">{</span>\n  <span class="token keyword">protected</span> <span class="token keyword">readonly</span> title <span class="token operator">=</span> <span class="token function">signal</span><span class="token punctuation">(</span><span class="token string">&#39;Search Films&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Open the component template file (<code>app.html</code>) and delete the default template generated by the Angular CLI. Replace it with the following line of HTML.</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token comment">&lt;!-- app.html --&gt;</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>{{title()}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>The double curly braces are Angular&#39;s <em>interpolation binding syntax</em>. This interpolation binding presents the component&#39;s title property value inside the HTML header tag.</p><p>The browser refreshes and displays the new application title.</p><p>The simplest way to insert data dynamically into your components is through text interpolation, using the <code>{{myVariable}}</code> syntax. Inside double curly braces, you can specify any valid JavaScript expression except for:</p><ul><li>bitwise operators: <code>&amp;</code>, <code>&amp;=</code>, <code>~</code>, <code>|=</code>, <code>^=</code>, etc.</li><li>object destructuring: <code>const { name } = person</code></li><li>array destructuring: <code>const [firstItem] = items</code></li><li>comma operator: <code>x = (x++, x)</code></li><li>instanceof: <code>movie instanceof Film</code></li><li>new: <code>new Film()</code></li><li>regex</li><li>declarations</li></ul><p>Add two fields after the title variable in the <code>app.ts</code> file:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// app.ts</span>\n<span class="token keyword">protected</span> <span class="token keyword">readonly</span> title <span class="token operator">=</span> <span class="token function">signal</span><span class="token punctuation">(</span><span class="token string">&#39;Search Films&#39;</span><span class="token punctuation">)</span>\n<span class="token keyword">protected</span> <span class="token keyword">readonly</span> orderReference <span class="token operator">=</span> <span class="token function">signal</span><span class="token punctuation">(</span><span class="token string">&#39;ABCXYZ&#39;</span><span class="token punctuation">)</span>\n<span class="token keyword">protected</span> <span class="token keyword">readonly</span> price <span class="token operator">=</span> <span class="token function">signal</span><span class="token punctuation">(</span><span class="token number">17.3</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In the template:</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token comment">&lt;!--app.html--&gt;</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>{{title()}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>Order ref. {{ orderReference() }} - Total: {{ price().toFixed(2) + &quot;€&quot; }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The template has access to all the non-private members of the component class. Changing the visibility of <code>price</code> to <code>private</code> will render this error: <em>Property &#39;price&#39; is private and only accessible within class &#39;App&#39;.</em></p><p>Interpolation only works on textual content of elements. You should not use it to change the value of HTML attributes and can&#39;t use it to insert HTML code. For this, we will see strategies later in the training.</p><p>In this example, we formatted the price manually. We will later see that Angular provides a way to declare reusable formatters: <strong>pipes</strong>.</p><h2 id="working-with-components" tabindex="-1"><a class="header-anchor" href="#working-with-components" aria-hidden="true">#</a> Working with components</h2><p>The <code>App</code> component is only the root component of an Angular application. A web application is made of small reusable components, embedded in higher level components to form the layout, the arrangement of your elements on the page. This structure can be described as a component tree. Angular creates, updates, and destroys components as the user moves through the application. The app can take action at each moment in this lifecycle through optional lifecycle hooks, like <code>ngOnInit()</code>.</p><p><img src="'+t+'" alt="Component tree"></p><p>Before generating a second component, let&#39;s configure the naming convention of components and other key building blocks of an Angular app. Since Angular 20, the type of building block (component, service, directive) generated is not automatically appended to the file name and class name. That gives more flexibility to teams in their naming choices, however it can easily lead to naming clashs where the component, the service and the DTO have exactly the same class name for instance. This is why we will add the following configuration to the <code>angular.json</code> file to restore the appending of the building block name to the class name and file name.</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token comment">// angular.json</span>\n  <span class="token property">&quot;cli&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">&quot;schematicCollections&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token string">&quot;angular-eslint&quot;</span>\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;schematics&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">&quot;@schematics/angular:component&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;component&quot;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;@schematics/angular:directive&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;directive&quot;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;@schematics/angular:service&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;service&quot;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;@schematics/angular:guard&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token property">&quot;typeSeparator&quot;</span><span class="token operator">:</span> <span class="token string">&quot;.&quot;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;@schematics/angular:interceptor&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token property">&quot;typeSeparator&quot;</span><span class="token operator">:</span> <span class="token string">&quot;.&quot;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;@schematics/angular:module&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token property">&quot;typeSeparator&quot;</span><span class="token operator">:</span> <span class="token string">&quot;.&quot;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;@schematics/angular:pipe&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token property">&quot;typeSeparator&quot;</span><span class="token operator">:</span> <span class="token string">&quot;.&quot;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;@schematics/angular:resolver&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token property">&quot;typeSeparator&quot;</span><span class="token operator">:</span> <span class="token string">&quot;.&quot;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n</code></pre><div class="highlight-lines"><br><br><br><br><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',25),m={href:"https://angular.dev/cli/generate#component",target:"_blank",rel:"noopener noreferrer"},k=(0,e.uE)('<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>ng g c child <span class="token comment">#shorthand for ng generate component child</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>The <code>ng g c</code> command added a <code>child</code> folder containing the <code>ChildComponent</code> files in the <code>app</code> folder.</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// child.ts</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Component<span class="token punctuation">,</span> signal <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@angular/core&#39;</span>\n\n<span class="token decorator"><span class="token at operator">@</span><span class="token function">Component</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  selector<span class="token operator">:</span> <span class="token string">&#39;app-child&#39;</span><span class="token punctuation">,</span>\n  imports<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  templateUrl<span class="token operator">:</span> <span class="token string">&#39;./child.component.html&#39;</span><span class="token punctuation">,</span>\n  styleUrls<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;./child.component.scss&#39;</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">ChildComponent</span> <span class="token punctuation">{</span>\n\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>To link the components together, the child components are declared in their parent&#39;s component template, using their selector as a tag. The child component also needs to be added to the <code>imports</code> array of the parent component decorator. A component can be reused as many times as desired. The <code>ChildComponent</code>&#39;s selector is <code>app-child</code>. Including this component as a child to the <code>App</code> component is done as follows:</p>',4),g=(0,e._)("div",{class:"language-html line-numbers-mode","data-ext":"html"},[(0,e._)("pre",{class:"language-html"},[(0,e._)("code",null,[(0,e._)("span",{class:"token tag"},[(0,e._)("span",{class:"token tag"},[(0,e._)("span",{class:"token punctuation"},"<"),(0,e.Uk)("h1")]),(0,e._)("span",{class:"token punctuation"},">")]),(0,e.Uk)("{{title()}}"),(0,e._)("span",{class:"token tag"},[(0,e._)("span",{class:"token tag"},[(0,e._)("span",{class:"token punctuation"},"</"),(0,e.Uk)("h1")]),(0,e._)("span",{class:"token punctuation"},">")]),(0,e.Uk)("\n"),(0,e._)("span",{class:"token tag"},[(0,e._)("span",{class:"token tag"},[(0,e._)("span",{class:"token punctuation"},"<"),(0,e.Uk)("app-child")]),(0,e._)("span",{class:"token punctuation"},">")]),(0,e._)("span",{class:"token tag"},[(0,e._)("span",{class:"token tag"},[(0,e._)("span",{class:"token punctuation"},"</"),(0,e.Uk)("app-child")]),(0,e._)("span",{class:"token punctuation"},">")]),(0,e.Uk)("\n")])]),(0,e._)("div",{class:"line-numbers","aria-hidden":"true"},[(0,e._)("div",{class:"line-number"}),(0,e._)("div",{class:"line-number"})])],-1),v=(0,e._)("div",{class:"language-typescript line-numbers-mode","data-ext":"ts"},[(0,e._)("pre",{class:"language-typescript"},[(0,e._)("code",null,[(0,e._)("span",{class:"token keyword"},"import"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)(" Component"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(" signal "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"from"),(0,e.Uk)(),(0,e._)("span",{class:"token string"},"'@angular/core'"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token keyword"},"import"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)(" ChildComponent "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"from"),(0,e.Uk)(),(0,e._)("span",{class:"token string"},"'./child/child.component'"),(0,e.Uk)("\n\n"),(0,e._)("span",{class:"token decorator"},[(0,e._)("span",{class:"token at operator"},"@"),(0,e._)("span",{class:"token function"},"Component")]),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n  selector"),(0,e._)("span",{class:"token operator"},":"),(0,e.Uk)(),(0,e._)("span",{class:"token string"},"'app-root'"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)("\n  imports"),(0,e._)("span",{class:"token operator"},":"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"["),(0,e.Uk)("ChildComponent"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)("\n  templateUrl"),(0,e._)("span",{class:"token operator"},":"),(0,e.Uk)(),(0,e._)("span",{class:"token string"},"'./app.html'"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)("\n  styleUrl"),(0,e._)("span",{class:"token operator"},":"),(0,e.Uk)(),(0,e._)("span",{class:"token string"},"'./app.scss'"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token punctuation"},"}"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token keyword"},"export"),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"class"),(0,e.Uk)(),(0,e._)("span",{class:"token class-name"},"AppComponent"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n  "),(0,e._)("span",{class:"token keyword"},"protected"),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"readonly"),(0,e.Uk)(" title "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"signal"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token string"},"'Search Films'"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n")])]),(0,e._)("div",{class:"highlight-lines"},[(0,e._)("br"),(0,e._)("div",{class:"highlight-line"}," "),(0,e._)("br"),(0,e._)("br"),(0,e._)("br"),(0,e._)("div",{class:"highlight-line"}," "),(0,e._)("br"),(0,e._)("br"),(0,e._)("br"),(0,e._)("br"),(0,e._)("br"),(0,e._)("br")]),(0,e._)("div",{class:"line-numbers","aria-hidden":"true"},[(0,e._)("div",{class:"line-number"}),(0,e._)("div",{class:"line-number"}),(0,e._)("div",{class:"line-number"}),(0,e._)("div",{class:"line-number"}),(0,e._)("div",{class:"line-number"}),(0,e._)("div",{class:"line-number"}),(0,e._)("div",{class:"line-number"}),(0,e._)("div",{class:"line-number"}),(0,e._)("div",{class:"line-number"}),(0,e._)("div",{class:"line-number"}),(0,e._)("div",{class:"line-number"}),(0,e._)("div",{class:"line-number"})])],-1),b=(0,e.uE)('<div class="custom-container tip"><p class="custom-container-title">TIP</p><p>Angular automatically prefixes selectors so that components imported from external libraries are easier to spot. For instance, components from the Material Angular library are all prefixed with <code>mat-</code>. You can change the app prefix in the <code>angular.json</code> configuration file so that it reflects your application name.</p></div><details class="custom-container details"><summary>NgModules (before Angular 17 and the standalone component architecture)</summary><p>Nowadays, components are declared as standalone by default. That is why the <code>standalone</code> property is not present in the <code>@Component</code> decorator by default anymore. Before the implementation of standalone, the architecture of an Angular app depended on NgModules. Each component had to be declared in an NgModule to be usable in the application. Each NgModule could declare as many components as the developer saw fit. The module was taking care of making sure that each component had access to its necessary dependencies, making all the necessary imports. With standalone components, this responsibility is now deported to each component. That is why there is now an <code>imports</code> array in the definition of <code>@Component</code>. You may still encounter architectures on the lastest version of Angular making use of NgModules as refactoring a whole application to use standalone components can be a big and risky endeavor.</p><p>Behind the scene, the <code>ng g c</code> command used to declare the <code>Child</code> component in the <code>AppModule</code> which was the root module of the application.</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// app.module.ts</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> NgModule <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@angular/core&#39;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> BrowserModule <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@angular/platform-browser&#39;</span>\n\n<span class="token keyword">import</span> <span class="token punctuation">{</span> AppRoutingModule <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./app-routing.module&#39;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> AppComponent <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./app.component&#39;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> ChildComponent <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./child/child.component&#39;</span>\n\n<span class="token decorator"><span class="token at operator">@</span><span class="token function">NgModule</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  declarations<span class="token operator">:</span> <span class="token punctuation">[</span>\n    AppComponent<span class="token punctuation">,</span>\n    ChildComponent\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  imports<span class="token operator">:</span> <span class="token punctuation">[</span>\n    BrowserModule<span class="token punctuation">,</span>\n    AppRoutingModule\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  providers<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  bootstrap<span class="token operator">:</span> <span class="token punctuation">[</span>AppComponent<span class="token punctuation">]</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AppModule</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>\n</code></pre><div class="highlight-lines"><br><br><br><br><br><br><br><br><br><br><br><div class="highlight-line"> </div><br><br><br><br><br><br><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>An NgModule is defined by a class decorated with <code>@NgModule()</code>. The <code>@NgModule()</code> decorator is a function that takes a single metadata object, whose properties describe the module. The most important properties are as follows:</p><ul><li><code>declarations</code>: The components, directives, and pipes that belong to this NgModule.</li><li><code>exports</code>: The subset of declarations that should be visible and usable in the component templates of other NgModules. (the <code>AppModule</code> has no reason to export anything because other modules don&#39;t need to import the root NgModule)</li><li><code>imports</code>: Other modules whose exported classes are needed by component templates declared in this NgModule.</li><li><code>providers</code>: Creators of services that this NgModule contributes to the global collection of services; they become accessible in all parts of the app. (You can also specify providers at the component level.)</li><li><code>bootstrap</code>: The main application view, called the root component, which hosts all other app views. Only the root NgModule should set the bootstrap property.</li></ul><p>While a small application might have had only one NgModule, as the app grows, it was a good practice to refactor the root module into feature modules that represented collections of related functionality. You then either imported these modules into the root module (eagerly loaded) or lazy loaded them asynchronously via the router.</p></details><h2 id="organising-your-files" tabindex="-1"><a class="header-anchor" href="#organising-your-files" aria-hidden="true">#</a> Organising your files</h2><p>Here is the folder structure we will strive to achieve in the Search Films application:</p>',4),f=(0,e._)("p",null,[(0,e._)("img",{src:o,alt:"Simple folder structure"})],-1),y=(0,e._)("p",null,[(0,e.Uk)("This folder structure is best suited to simple projects with only one main feature that has its routes defined in one place, the "),(0,e._)("code",null,"app.route.ts"),(0,e.Uk)(" file. As a project grows, feature folders and routes will be introduced and the structure can evolve to this:")],-1),w=(0,e._)("p",null,[(0,e._)("img",{src:p,alt:"Multi feature folder structure"})],-1),_={href:"https://angular.dev/style-guide",target:"_blank",rel:"noopener noreferrer"},q=(0,e.uE)('<div class="custom-container tip"><p class="custom-container-title">TIP</p><p>By default, the CLI will always generate in the <code>app</code> folder. You can tell it to generate in another folder by passing the path before the name of the element you want it to generate. For instance <code>ng generate component components/dashboard</code> will generate the <code>DashboardComponent</code> 4 files in <code>app/components/dashboard</code>. The <code>components</code> folder is created by the CLI if it doesn&#39;t already exist, as well as the <code>dashboard</code> folder.</p></div>',1),U=(0,e._)("h2",{id:"practical-work-your-first-component",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#practical-work-your-first-component","aria-hidden":"true"},"#"),(0,e.Uk)(" Practical work: Your first component")],-1),x=(0,e._)("li",null,[(0,e._)("p",null,[(0,e.Uk)("If you created the "),(0,e._)("code",null,"app-child"),(0,e.Uk)(" component, delete it as we won't need it moving forward and remove any reference to it in the "),(0,e._)("code",null,"App"),(0,e.Uk)(" component. You may get an error in the console where you launched the project once you delete the child component, in that case restart the project.")])],-1),C=(0,e._)("code",null,"styles.scss",-1),T={href:"https://worldline.github.io/angular-training/styles.scss",target:"_blank",rel:"noopener noreferrer"},A=(0,e._)("li",null,[(0,e._)("p",null,[(0,e.Uk)("Create a new component "),(0,e._)("code",null,"login-form"),(0,e.Uk)(" containing the following authentication form (don't forget to generate it in the "),(0,e._)("em",null,"components"),(0,e.Uk)(" folder):")])],-1),j=(0,e.uE)('<div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>login-form<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>Authentication<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>Fill out this form to login.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>\n\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>email<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Email<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Enter your email<span class="token punctuation">&quot;</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>email<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>email<span class="token punctuation">&quot;</span></span> <span class="token attr-name">required</span><span class="token punctuation">/&gt;</span></span>\n\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>psw<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Password<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>password<span class="token punctuation">&quot;</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Enter your password<span class="token punctuation">&quot;</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>psw<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>password<span class="token punctuation">&quot;</span></span> <span class="token attr-name">required</span><span class="token punctuation">/&gt;</span></span>\n\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>submit<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Login<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span>\n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li><p>Delete the existing content of the <code>App</code> component template (html file of the component) if it is not already done and the variables declared in the <code>App</code> class. Display the <code>LoginFormComponent</code> in the <code>App</code> component by addding <code>&lt;app-login-form&gt;&lt;/app-login-form&gt;</code> in its template. Don&#39;t forget to add the <code>LoginFormComponent</code> class to the <code>imports</code> array of the @Component definition of the <code>App</code> class (if you used VSCode aucompletion to add the new component to the App component template, then it should be added automatically).</p></li><li><p>Complete the <code>login-form.ts</code> file: add a field <code>protected readonly title = signal(&#39;Authentication&#39;)</code>. Then, use text interpolation in the template to pass the title from the component ts file to the h1 tag. Don&#39;t forget that you need to invoke a signal to read its value.</p></li><li><p>Don&#39;t forget to commit</p></li></ol><details class="custom-container details"><summary>Expected result</summary><p><img src="'+i+'" alt="Visual result of the first component practical work"></p></details>',3),M={},S=(0,a(3744).Z)(M,[["render",function(n,s){const a=(0,e.up)("ExternalLinkIcon"),t=(0,e.up)("CodeGroupItem"),o=(0,e.up)("CodeGroup");return(0,e.wg)(),(0,e.iD)("div",null,[l,(0,e._)("div",c,[r,(0,e._)("p",null,[(0,e.Uk)("To ensure that all developers working on a project use the same library versions, it is possible to "),(0,e._)("a",d,[(0,e.Uk)("block the version numbers"),(0,e.Wm)(a)]),(0,e.Uk)(" via the "),u,(0,e.Uk)(" file.")])]),h,(0,e._)("p",null,[(0,e.Uk)("Let's create a second component. It is advised to generate components using the "),(0,e._)("a",m,[(0,e.Uk)("Angular CLI"),(0,e.Wm)(a)]),(0,e.Uk)(".")]),k,(0,e.Wm)(o,null,{default:(0,e.w5)((()=>[(0,e.Wm)(t,{title:"app.html"},{default:(0,e.w5)((()=>[g])),_:1}),(0,e.Wm)(t,{title:"app.ts"},{default:(0,e.w5)((()=>[v])),_:1})])),_:1}),b,(0,e.kq)(" TODO replace image"),f,y,(0,e.kq)(" TODO replace image "),w,(0,e._)("p",null,[(0,e.Uk)("The Angular team provides a "),(0,e._)("a",_,[(0,e.Uk)("style guide"),(0,e.Wm)(a)]),(0,e.Uk)(" where they advise to follow such a structure instead of the first one. When in doubt, refer to it.")]),q,(0,e.kq)(' As the complexity of the folder structure of the application increases, it is a good practice to add aliases in the `tsconfig.json` file. Let\'s do it now to avoid a tedious refactoring later:\n```json\n"compilerOptions": {\n  //...\n  "baseUrl": "./src",\n  "paths": {\n    "@models/*": ["src/app/models/*"],\n    "@services/*": ["src/app/services/*"],\n    "@guards/*": ["src/app/guards/*"],\n    "@pipes/*": ["src/app/pipes/*"],\n    "@components/*": ["src/app/components/*"]\n  }\n}\n```\nVsCode will automatically use those paths for the imports instead of relative ones that can be tough to read or maintain. '),U,(0,e._)("ol",null,[x,(0,e._)("li",null,[(0,e._)("p",null,[(0,e.Uk)("Most apps strive for a consistent look across the application. The CLI generated an empty "),C,(0,e.Uk)(" file for this purpose. Copy paste the content of the SCSS stylesheet that will serve as basis for all the practical work, downloadable here: "),(0,e._)("a",T,[(0,e.Uk)("styles.scss"),(0,e.Wm)(a)]),(0,e.Uk)(" in it.")])]),A]),j])}]])},7861:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e=JSON.parse('{"key":"v-76b3265c","path":"/en/first-steps.html","title":"First steps","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"File structure","slug":"file-structure","link":"#file-structure","children":[]},{"level":2,"title":"Text interpolation in templates","slug":"text-interpolation-in-templates","link":"#text-interpolation-in-templates","children":[]},{"level":2,"title":"Working with components","slug":"working-with-components","link":"#working-with-components","children":[]},{"level":2,"title":"Organising your files","slug":"organising-your-files","link":"#organising-your-files","children":[]},{"level":2,"title":"Practical work: Your first component","slug":"practical-work-your-first-component","link":"#practical-work-your-first-component","children":[]}],"git":{},"filePathRelative":"en/first-steps.md"}')},2984:(n,s,a)=>{n.exports=a.p+"assets/img/folder-structure-multi-module.380b0fe3.png"},9868:(n,s,a)=>{n.exports=a.p+"assets/img/folder-structure.2e44dedc.png"},5182:(n,s,a)=>{n.exports=a.p+"assets/img/tree.5117a965.png"},9589:(n,s,a)=>{n.exports=a.p+"assets/img/visual-1.42504f6c.png"}}]);