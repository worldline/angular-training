"use strict";(self.webpackChunkangular_training=self.webpackChunkangular_training||[]).push([[933],{1910:(e,a,s)=>{s.r(a),s.d(a,{default:()=>u});var r=s(6252),i=s(7695),t=s(8434);const n=[(0,r.uE)('<h1 id="presentation-d-angular" tabindex="-1"><a class="header-anchor" href="#presentation-d-angular" aria-hidden="true">#</a> Présentation d&#39;Angular</h1><h2 id="qu-est-ce-que-angular" tabindex="-1"><a class="header-anchor" href="#qu-est-ce-que-angular" aria-hidden="true">#</a> Qu&#39;est-ce que Angular ?</h2><p>Angular est plus qu&#39;un simple framework frontend avec lequel créer des SPA (Single Page Applications). Il s&#39;agit d&#39;une plate-forme de développement à part entière construite en TypeScript qui comprend :</p><ul><li>Un framework basé sur des composants pour créer des applications Web scalables.</li><li>Une collection de librairies bien intégrées qui couvrent une grande variété de fonctionnalités, notamment le routage, la gestion des formulaires, la communication client-serveur, les progressive web apps, etc.</li><li>Une suite d&#39;outils de développement pour vous aider à développer, créer, tester et mettre à jour votre code via le CLI Angular.</li></ul><p>Angular est développé et maintenu par Google et sa sortie initiale remonte à septembre 2016. C&#39;est une réécriture complète d&#39;AngularJS et en tant que tel, Angular est un framework à part.</p><h2 id="un-peu-d-histoire" tabindex="-1"><a class="header-anchor" href="#un-peu-d-histoire" aria-hidden="true">#</a> Un peu d&#39;histoire</h2><p>AngularJS, développé par Google et lancé en 2010, était un framework pionnier pour la création d&#39;applications web dynamiques utilisant HTML et JavaScript. Ses fonctionnalités clés, telles que le two-way data-binding et l&#39;injection de dépendances, ont révolutionné le développement front-end en permettant aux développeurs de construire des applications complexes de manière plus efficace. En 2016, Google a publié Angular 2, une réécriture complète d&#39;AngularJS, introduisant une architecture basée sur les composants et des améliorations significatives de la performance. Cela a marqué la transition vers le framework moderne &quot;Angular&quot; (sans le &quot;JS&quot;). Les versions suivantes, commençant par Angular 4, ont continué à améliorer la performance, à introduire de nouvelles fonctionnalités comme Angular Universal pour le rendu côté serveur, et à améliorer les outils avec Angular CLI.</p><h2 id="pages-generees-par-le-serveur-vs-spa-api" tabindex="-1"><a class="header-anchor" href="#pages-generees-par-le-serveur-vs-spa-api" aria-hidden="true">#</a> Pages générées par le serveur vs SPA + API</h2><p>Il existe deux modèles courants de développement de sites Web :</p><ul><li>Pages générées par le serveur : <ul><li>La présentation et les données de chaque page sont générées par le serveur avant de les livrer au client</li><li>Généralement avec état (cela signifie que les données sont partagées lors de la navigation sur les pages à l&#39;aide de sessions et de cookies)</li><li>L&#39;interface utilisateur et la logique métier sont couplées</li><li>Le corps de la réponse est généralement plus lourd car il contient à la fois l&#39;interface utilisateur et les données</li><li>Également appelées applications multipages (puisque chaque vue est représentée par une page distincte)</li><li>Quelques exemples de frameworks : PHP, Symphony, JSP, Tapestry, ASP Razor pages</li></ul></li></ul><p><img src="'+i+'" alt="server page"></p><ul><li>Application à page unique (SPA) + API : <ul><li>L&#39;interface utilisateur se compose d&#39;un seul fichier HTML statique. Le fichier est dit statique car le serveur ne modifie pas la page avant de la livrer</li><li>Les données sont récupérées dynamiquement du serveur lorsque le client en a besoin <ul><li>Le serveur qui sert les données est communément appelé un serveur API/backend</li><li>Les données sont généralement au format JSON</li><li>Il n&#39;est pas nécessaire de fournir une API (par exemple, un jeu vidéo sur SPA)</li></ul></li><li>Le contenu de la page est modifié par le client via la manipulation du DOM. Cela permet par exemple de simuler un changement de vue ou de page</li><li>Le client utilise Javascript pour récupérer des données dynamiques et manipuler le DOM</li><li>Ce modèle est similaire à celui utilisé dans les applications mobiles (la SPA est analogue à l&#39;application mobile)</li></ul></li></ul><p><img src="'+t+'" alt="server page"></p><p>Une application Angular est une <em>SPA</em> qui est complété par une API si besoin. Il existe d&#39;autres frameworks SPA tels que Vue.js, React et Ember.js (le dernier est le moins populaire). Chaque framework a ses propres forces et faiblesses.</p><h2 id="les-avantages-d-utiliser-angular" tabindex="-1"><a class="header-anchor" href="#les-avantages-d-utiliser-angular" aria-hidden="true">#</a> Les avantages d&#39;utiliser Angular</h2><p>Angular présente de nombreux avantages :</p><ul><li>Il est particulièrement bien adapté aux projets qui doivent scale et à cet effet, il est principalement utilisé pour les projets d&#39;entreprise.</li><li>Son riche écosystème de librairies officielles permet une grande cohérence entre projets, ce qui signifie que lors d&#39;un changement d&#39;équipes ou de projets, vous n&#39;aurez besoin que de monter en compétences sur le nouveau domaine d&#39;activité et non sur une façon différente de développer, car, par exemple, un autre choix de librairies aura été fait.</li><li>Il est très bien documenté et la cohérence dans la manière dont le framework est utilisé signifie que vous êtes plus que susceptible de trouver en ligne des réponses à toutes les questions que vous pourriez rencontrer au cours de votre parcours d&#39;apprentissage.</li><li>L&#39;équipe Angular est très fière de la manière avec laquelle elle facilite la mise à jour des projets Angular, en fournissant des étapes faciles à suivre et une migration entièrement automatisée.</li></ul><h2 id="comparaison-des-frameworks" tabindex="-1"><a class="header-anchor" href="#comparaison-des-frameworks" aria-hidden="true">#</a> Comparaison des frameworks</h2><h3 id="react" tabindex="-1"><a class="header-anchor" href="#react" aria-hidden="true">#</a> React</h3><p><strong>Avantages</strong> : Flexibilité, vaste écosystème, forte communauté.<br><strong>Fonctionnalités clés</strong> : Architecture basée sur les composants, favorisant la création de composants UI réutilisables.<br><strong>Cas d&#39;utilisation</strong> : Idéal pour des applications à grande échelle grâce à ses capacités de rendu efficaces.</p><h3 id="angular" tabindex="-1"><a class="header-anchor" href="#angular" aria-hidden="true">#</a> Angular</h3><p><strong>Avantages</strong> : Framework complet avec des fonctionnalités intégrées.<br><strong>Fonctionnalités clés</strong> : Injection de dépendances, puissantes capacités de routage, outils préconfigurés.<br><strong>Cas d&#39;utilisation</strong> : Mieux adapté aux applications d&#39;entreprise nécessitant une structure robuste.</p><h3 id="vue-js" tabindex="-1"><a class="header-anchor" href="#vue-js" aria-hidden="true">#</a> Vue.js</h3><p><strong>Avantages</strong> : Simplicité et facilité d&#39;intégration.<br><strong>Fonctionnalités clés</strong> : Liaison de données réactive et architecture flexible permettant l&#39;évolutivité.<br><strong>Cas d&#39;utilisation</strong> : Utilisé couramment dans des projets allant des petites applications aux déploiements à grande échelle, en particulier lorsque des setups rapides sont nécessaires.</p><h3 id="svelte" tabindex="-1"><a class="header-anchor" href="#svelte" aria-hidden="true">#</a> Svelte</h3><p><strong>Avantages</strong> : Approche novatrice de compilation, performance.<br><strong>Fonctionnalités clés</strong> : Compile les composants au moment du build, ce qui permet d&#39;obtenir un output optimisé avec un minimum de surcharge d&#39;exécution.<br><strong>Cas d&#39;utilisation</strong> : Convient aux projets où la performance est critique et où les développeurs cherchent à minimiser le traitement côté client.</p><p>Le choix du framework dépend des exigences du projet, des compétences de l&#39;équipe et des paradigmes de développement préférés par l&#39;équipe. Chaque framework a ses forces uniques et est adapté à différents types de besoins de développement.</p>',27)],l={},u=(0,s(3744).Z)(l,[["render",function(e,a){return(0,r.wg)(),(0,r.iD)("div",null,n)}]])},343:(e,a,s)=>{s.r(a),s.d(a,{data:()=>r});const r=JSON.parse('{"key":"v-40885816","path":"/fr/presentation.html","title":"Présentation d\'Angular","lang":"fr-FR","frontmatter":{},"headers":[{"level":2,"title":"Qu\'est-ce que Angular ?","slug":"qu-est-ce-que-angular","link":"#qu-est-ce-que-angular","children":[]},{"level":2,"title":"Un peu d\'histoire","slug":"un-peu-d-histoire","link":"#un-peu-d-histoire","children":[]},{"level":2,"title":"Pages générées par le serveur vs SPA + API","slug":"pages-generees-par-le-serveur-vs-spa-api","link":"#pages-generees-par-le-serveur-vs-spa-api","children":[]},{"level":2,"title":"Les avantages d\'utiliser Angular","slug":"les-avantages-d-utiliser-angular","link":"#les-avantages-d-utiliser-angular","children":[]},{"level":2,"title":"Comparaison des frameworks","slug":"comparaison-des-frameworks","link":"#comparaison-des-frameworks","children":[{"level":3,"title":"React","slug":"react","link":"#react","children":[]},{"level":3,"title":"Angular","slug":"angular","link":"#angular","children":[]},{"level":3,"title":"Vue.js","slug":"vue-js","link":"#vue-js","children":[]},{"level":3,"title":"Svelte","slug":"svelte","link":"#svelte","children":[]}]}],"git":{},"filePathRelative":"fr/presentation.md"}')},7695:(e,a,s)=>{e.exports=s.p+"assets/img/MPA.c571c58f.svg"},8434:(e,a,s)=>{e.exports=s.p+"assets/img/SPA.5f5dd11c.svg"}}]);