"use strict";(self.webpackChunkangular_training=self.webpackChunkangular_training||[]).push([[68],{5482:(n,s,a)=>{a.r(s),a.d(s,{default:()=>on});var e=a(6252);const t=(0,e._)("h1",{id:"rxjs",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#rxjs","aria-hidden":"true"},"#"),(0,e.Uk)(" RxJS")],-1),o={href:"https://rxjs.dev/guide/overview",target:"_blank",rel:"noopener noreferrer"},p={href:"http://reactivex.io/",target:"_blank",rel:"noopener noreferrer"},i=(0,e.uE)("<p>The ReactiveX <code>Observable</code> model allows you to treat streams of asynchronous events with the same sort of simple, composable operations that you use for collections of data items like arrays, operations such as <code>filter</code>, <code>map</code>, <code>flatMap</code>, <code>reduce</code> and many more. It frees you from tangled webs of callbacks, and thereby makes your code more readable and less prone to bugs.</p><p>The library provides the <code>Observable</code> type as well as utility functions to:</p><ul><li>convert existing code linked to async operations into observables</li><li>iterating through the values in a stream</li><li>mapping values to different types</li><li>filtering streams</li><li>catching errors</li><li>composing multiple streams</li></ul><p>This chapter will not go in depth about the concepts of Rx, you can refer to the official documentation to that purpose. However it will illustrate common situations encountered in Angular applications.</p>",4),c={class:"custom-container warning"},l=(0,e._)("p",{class:"custom-container-title"},"WARNING",-1),r={href:"https://rxjs.dev/",target:"_blank",rel:"noopener noreferrer"},u=(0,e.uE)('<h2 id="the-observable" tabindex="-1"><a class="header-anchor" href="#the-observable" aria-hidden="true">#</a> The Observable</h2><p>The previous chapter showed you the basic usage of Observables. Here is what we saw in it:</p><ul><li>Observables are returned by the <code>HttpClient</code> service methods.</li><li>Observables are only executed once subscribed to</li><li>The subscribe method takes one object with three callbacks (next, error and complete) as a parameter.</li></ul><p>First, let&#39;s illustrate the second and third points:</p><iframe height="500" width="100%" src="https://stackblitz.com/github/ocunidee/atpw-observable/tree/master?ctl=1&amp;embed=1&amp;file=src/app/app.component.ts&amp;hideExplorer=1&amp;hideNavigation=1&amp;title=Observable"></iframe><p>The <code>Observable</code> fires 3 next notifications followed by a complete notification. Observables either stop emitting values because they error out or because they complete. The two events are mutually exclusive.</p><h2 id="observable-creation" tabindex="-1"><a class="header-anchor" href="#observable-creation" aria-hidden="true">#</a> Observable creation</h2><p>In an Angular app, you will rarely have to create observables yourself. Most of the time you will handle streams that the framework created for you such as handling http call results, listening to router events or listening to form events when using the <code>ReactiveFormsModule</code> (the name of the module gives away its reactive nature). However, you may encounter situations where it may fall on you to create a stream. Here are a the main ways it could happen.</p>',8),k={href:"https://rxmarbles.com/#interval",target:"_blank",rel:"noopener noreferrer"},d={href:"https://rxjs.dev/api/index/function/interval",target:"_blank",rel:"noopener noreferrer"},m=(0,e.uE)('<div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token function">interval</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token function-variable function">next</span><span class="token operator">:</span> n <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">It&#39;s been </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> seconds since subscribing!</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',1),h={href:"https://rxmarbles.com/#from",target:"_blank",rel:"noopener noreferrer"},b={href:"https://rxjs.dev/api/index/function/from",target:"_blank",rel:"noopener noreferrer"},v=(0,e.uE)('<div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> promise1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token builtin">Promise</span></span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token function">from</span><span class="token punctuation">(</span>promise1<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token function-variable function">next</span><span class="token operator">:</span> message <span class="token operator">=&gt;</span> <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">The delayed message is &#39;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>message<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&#39;</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token function-variable function">error</span><span class="token operator">:</span> error <span class="token operator">=&gt;</span> <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>promiseMessage <span class="token operator">=</span> <span class="token string">&#39;There\\&#39;s been an error&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token function-variable function">complete</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Completed&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',1),g={href:"https://rxjs.dev/api/index/function/fromEvent",target:"_blank",rel:"noopener noreferrer"},_=(0,e.uE)('<div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token function">fromEvent</span><span class="token punctuation">(</span>document<span class="token punctuation">,</span> <span class="token string">&#39;click&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token function-variable function">next</span><span class="token operator">:</span> _ <span class="token operator">=&gt;</span> <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Clicked!&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>The following Stackblitz let&#39;s you play around with those examples:</p><iframe height="500" width="100%" src="https://stackblitz.com/github/ocunidee/atpw-observable-creation/tree/master?ctl=1&amp;embed=1&amp;file=src/app/app.component.ts&amp;hideExplorer=1&amp;title=Observable%20creation"></iframe><h2 id="filtering-and-mapping" tabindex="-1"><a class="header-anchor" href="#filtering-and-mapping" aria-hidden="true">#</a> Filtering and mapping</h2>',4),f=(0,e._)("code",null,"Array.prototype.map",-1),y=(0,e._)("code",null,"map",-1),U={href:"https://rxmarbles.com/#map",target:"_blank",rel:"noopener noreferrer"},w={href:"https://rxjs.dev/api/operators/map",target:"_blank",rel:"noopener noreferrer"},x=(0,e._)("code",null,"Observable",-1),T=(0,e._)("p",null,"Let's transform the previous example about the click event on the document so that it prints the coordinates of the click:",-1),E=(0,e._)("iframe",{height:"500",width:"100%",src:"https://stackblitz.com/github/ocunidee/atpw-rx-operators/tree/master?ctl=1&embed=1&file=src/app/app.component.ts&hideExplorer=1&hideNavigation=1&title=Mapping%20and%20Filtering"},null,-1),O=(0,e._)("div",{class:"custom-container tip"},[(0,e._)("p",{class:"custom-container-title"},"Pipe"),(0,e._)("p",null,[(0,e._)("code",null,"pipe()"),(0,e.Uk)(" is a function used to compose operators such as "),(0,e._)("code",null,"map()"),(0,e.Uk)(", "),(0,e._)("code",null,"filter()"),(0,e.Uk)(", "),(0,e._)("code",null,"take()"),(0,e.Uk)("... Operators are applied to the stream in the order they are passed to the pipe function")])],-1),S=(0,e._)("code",null,"Array.prototype.filter",-1),W=(0,e._)("code",null,"filter",-1),R={href:"https://rxmarbles.com/#filter",target:"_blank",rel:"noopener noreferrer"},j={href:"https://rxjs.dev/api/operators/filter",target:"_blank",rel:"noopener noreferrer"},M=(0,e.uE)('<div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token function">from</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">filter</span><span class="token punctuation">(</span>data <span class="token operator">=&gt;</span> data <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token function-variable function">next</span><span class="token operator">:</span> data <span class="token operator">=&gt;</span> <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This snippet will print:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token number">2</span>\n<span class="token number">4</span>\n<span class="token number">6</span>\n<span class="token number">8</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Exercise: Using the previous Stackblitz about the map operation, only update the message for clicks made within the coordinates between 0-100 on the x and y axis.</strong></p><h2 id="error-handling" tabindex="-1"><a class="header-anchor" href="#error-handling" aria-hidden="true">#</a> Error handling</h2><p>Like seen previously, the <code>subscribe</code> method takes an object that has an <code>error</code> callback. When the <code>Observable</code> errors out, it is executed instead of the <code>next</code> callback and the <code>Observable</code> stops emitting.</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">this</span><span class="token punctuation">.</span>userService<span class="token punctuation">.</span><span class="token function">getUsers</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token function-variable function">next</span><span class="token operator">:</span> users <span class="token operator">=&gt;</span> <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">The following users exist in the system: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>users<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token function-variable function">error</span><span class="token operator">:</span> error <span class="token operator">=&gt;</span> <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">An error occurred: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>error<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token function-variable function">complete</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Completed&#39;</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',7),N=(0,e._)("code",null,"catchError",-1),A={href:"https://rxjs.dev/api/operators/catchError",target:"_blank",rel:"noopener noreferrer"},C=(0,e._)("code",null,"next",-1),I=(0,e._)("code",null,"error",-1),H=(0,e.uE)('<p>Let&#39;s imagine you expect an array of users from the backend but it sends you back a 404 HTTP error, you can use <code>catchError</code> to return an empty array instead, and keep throwing an error for other HTTP errors.</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">this</span><span class="token punctuation">.</span>userService<span class="token punctuation">.</span><span class="token function">getUsers</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>\n    <span class="token function">catchError</span><span class="token punctuation">(</span>error <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>error <span class="token keyword">as</span> HttpErrorResponse<span class="token punctuation">)</span><span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">404</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token keyword">of</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n      <span class="token punctuation">}</span>\n\n      <span class="token keyword">return</span> <span class="token function">throwError</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token function-variable function">next</span><span class="token operator">:</span> users <span class="token operator">=&gt;</span> <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">The following users exist in the system: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>users<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token function-variable function">error</span><span class="token operator">:</span> error <span class="token operator">=&gt;</span> <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">An error occurred: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>error<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token function-variable function">complete</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Completed&#39;</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Question: What will be printed to the console in case of a 404 error returned by the backend? In case of a 500?</strong></p><h2 id="stream-composition" tabindex="-1"><a class="header-anchor" href="#stream-composition" aria-hidden="true">#</a> Stream composition</h2><p>Streams can be composed for many purposes. To study this notion in a simpler environment, we will only study it in the context of backend calls.</p>',5),F=(0,e._)("code",null,"switchMap",-1),J={href:"https://rxjs.dev/api/operators/switchMap",target:"_blank",rel:"noopener noreferrer"},P={href:"https://rxmarbles.com/#switchMap",target:"_blank",rel:"noopener noreferrer"},z=(0,e._)("iframe",{height:"500",width:"100%",src:"https://stackblitz.com/edit/switchmap-training?ctl=1&devtoolsheight=33&embed=1&file=index.ts&hideExplorer=1&hideNavigation=1&title=SwitchMap%20example"},null,-1),D=(0,e._)("p",null,[(0,e._)("strong",null,"Question: From this example, what do you learn on the way switchMap works? (Having a look at the marble diagram can help)")],-1),L=(0,e._)("p",null,"Let's adapt the above example to the context of chained backend calls:",-1),Y=(0,e._)("iframe",{height:"500",width:"100%",src:"https://stackblitz.com/github/ocunidee/atpw-switchMap/tree/master?ctl=1&embed=1&file=src/app/app.component.ts&hideExplorer=1&hideNavigation=1&title=SwitchMap%20exercise"},null,-1),$=(0,e._)("code",null,"exhaustMap",-1),G={href:"https://rxjs.dev/api/operators/exhaustMap",target:"_blank",rel:"noopener noreferrer"},q=(0,e._)("code",null,"switchMap",-1),X=(0,e.uE)('<div class="custom-container danger"><p class="custom-container-title">Don&#39;t nest subscribes</p><p>A very common pitfall with RxJS is to nest subscribes. RxJS provides plenty of operators so that you won&#39;t ever have to mix synchronous and asynchronous code. Why shouldn&#39;t you mix them ?</p><ul><li>it is spaghetti code that becomes hard to read and maintain as it doesn&#39;t benefit from the declarativeness of RxJS anymore,</li><li>it makes it hard to compose observables,</li><li>it causes memory leaks.</li></ul><p>Most often it is done without realising. For instance, inside the next callback of a subscribe you call a method that has a subscribe. That is nesting subscribes.</p><p>Example of what you should NOT do:</p><iframe height="500" width="100%" src="https://stackblitz.com/github/ocunidee/atpw-switchMap/tree/nested-subscribe?ctl=1&amp;embed=1&amp;file=src/app/app.component.ts&amp;hideExplorer=1&amp;hideNavigation=1&amp;title=Don&#39;t nest subscribes"></iframe></div><h2 id="unsubscribing" tabindex="-1"><a class="header-anchor" href="#unsubscribing" aria-hidden="true">#</a> Unsubscribing</h2><p>For the moment we&#39;ve seen how to subscribe to Observables. To avoid memory leaks with long-lived Observables, you should unsubscribe from them.</p><p>Let&#39;s reuse our previous routing example to illustrate how memory leaks can happen. An interval Observable is created in the ngOnInit method of the book details component. <strong>Navigate to the details of a book and watch the console. Then leave the page and come back. What happens in the console? What does it mean?</strong></p><iframe height="500" width="100%" src="https://stackblitz.com/github/ocunidee/atpw-routing/tree/memory-leak?ctl=1&amp;embed=1&amp;file=src/app/book-details/book-details.component.ts&amp;hideExplorer=1&amp;hideNavigation=1&amp;title=Memory leak"></iframe><p>When should you unsubscribe? If you have no certainty the <code>Observable</code> will complete or error out, you should manually unsubscribe from it. The <code>HttpClient</code> always completes the Observable it returns after having received a response. So, theoretically, if you only encounter Observables from the <code>HttpClient</code>, you do not have to take care of unsubscribing. In other cases, <strong>be safe and unsubscribe</strong>.</p><p>How to unsubscribe? Using the <code>takeUntilDestroyed</code> operator and passing it a <code>destroyRef</code>.</p><p>Let&#39;s fix the memory leak of the previous example.</p><iframe height="500" width="100%" src="https://stackblitz.com/github/ocunidee/atpw-routing/tree/memory-leak-fix?ctl=1&amp;embed=1&amp;file=src/app/book-details/book-details.component.ts&amp;hideExplorer=1&amp;hideNavigation=1&amp;title=takeUntilDestroyed"></iframe><h2 id="the-async-pipe" tabindex="-1"><a class="header-anchor" href="#the-async-pipe" aria-hidden="true">#</a> The async pipe</h2><p>Subscribing to an <code>Observable</code> and storing the value in a class property is not the only way to display the values of the <code>Observable</code>. Angular provides a pipe to apply directly on the <code>Observable</code>.</p>',11),Q=(0,e._)("div",{class:"language-typescript line-numbers-mode","data-ext":"ts"},[(0,e._)("pre",{class:"language-typescript"},[(0,e._)("code",null,[(0,e._)("span",{class:"token keyword"},"export"),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"class"),(0,e.Uk)(),(0,e._)("span",{class:"token class-name"},"AppComponent"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n  counter"),(0,e._)("span",{class:"token operator"},":"),(0,e.Uk)(" Observable"),(0,e._)("span",{class:"token operator"},"<"),(0,e._)("span",{class:"token builtin"},"number"),(0,e._)("span",{class:"token operator"},">"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"interval"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token number"},"1000"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n")])]),(0,e._)("div",{class:"line-numbers","aria-hidden":"true"},[(0,e._)("div",{class:"line-number"}),(0,e._)("div",{class:"line-number"}),(0,e._)("div",{class:"line-number"})])],-1),V=(0,e._)("div",{class:"language-html line-numbers-mode","data-ext":"html"},[(0,e._)("pre",{class:"language-html"},[(0,e._)("code",null,[(0,e._)("span",{class:"token tag"},[(0,e._)("span",{class:"token tag"},[(0,e._)("span",{class:"token punctuation"},"<"),(0,e.Uk)("p")]),(0,e._)("span",{class:"token punctuation"},">")]),(0,e.Uk)("{{counter | async}}"),(0,e._)("span",{class:"token tag"},[(0,e._)("span",{class:"token tag"},[(0,e._)("span",{class:"token punctuation"},"</"),(0,e.Uk)("p")]),(0,e._)("span",{class:"token punctuation"},">")]),(0,e.Uk)("\n")])]),(0,e._)("div",{class:"line-numbers","aria-hidden":"true"},[(0,e._)("div",{class:"line-number"})])],-1),B=(0,e._)("p",null,"For objects, an alternative syntax exists to avoid repetitively using the async pipe to access each field, since it creates a new subscription each time and retriggers the observable:",-1),K=(0,e._)("div",{class:"language-html line-numbers-mode","data-ext":"html"},[(0,e._)("pre",{class:"language-html"},[(0,e._)("code",null,[(0,e._)("span",{class:"token comment"},"\x3c!-- TO BE AVOIDED --\x3e"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token tag"},[(0,e._)("span",{class:"token tag"},[(0,e._)("span",{class:"token punctuation"},"<"),(0,e.Uk)("p")]),(0,e._)("span",{class:"token punctuation"},">")]),(0,e.Uk)("{{(user | async)?.firstName}}"),(0,e._)("span",{class:"token tag"},[(0,e._)("span",{class:"token tag"},[(0,e._)("span",{class:"token punctuation"},"</"),(0,e.Uk)("p")]),(0,e._)("span",{class:"token punctuation"},">")]),(0,e.Uk)("\n"),(0,e._)("span",{class:"token tag"},[(0,e._)("span",{class:"token tag"},[(0,e._)("span",{class:"token punctuation"},"<"),(0,e.Uk)("p")]),(0,e._)("span",{class:"token punctuation"},">")]),(0,e.Uk)("{{(user | async)?.lastName}}"),(0,e._)("span",{class:"token tag"},[(0,e._)("span",{class:"token tag"},[(0,e._)("span",{class:"token punctuation"},"</"),(0,e.Uk)("p")]),(0,e._)("span",{class:"token punctuation"},">")]),(0,e.Uk)("\n"),(0,e._)("span",{class:"token tag"},[(0,e._)("span",{class:"token tag"},[(0,e._)("span",{class:"token punctuation"},"<"),(0,e.Uk)("p")]),(0,e._)("span",{class:"token punctuation"},">")]),(0,e.Uk)("{{(user | async)?.age}}"),(0,e._)("span",{class:"token tag"},[(0,e._)("span",{class:"token tag"},[(0,e._)("span",{class:"token punctuation"},"</"),(0,e.Uk)("p")]),(0,e._)("span",{class:"token punctuation"},">")]),(0,e.Uk)("\n\n"),(0,e._)("span",{class:"token comment"},"\x3c!-- PREFERRED WAY --\x3e"),(0,e.Uk)("\n@if (user | async as user) {\n  "),(0,e._)("span",{class:"token tag"},[(0,e._)("span",{class:"token tag"},[(0,e._)("span",{class:"token punctuation"},"<"),(0,e.Uk)("p")]),(0,e._)("span",{class:"token punctuation"},">")]),(0,e.Uk)("{{user.firstName}}"),(0,e._)("span",{class:"token tag"},[(0,e._)("span",{class:"token tag"},[(0,e._)("span",{class:"token punctuation"},"</"),(0,e.Uk)("p")]),(0,e._)("span",{class:"token punctuation"},">")]),(0,e.Uk)("\n  "),(0,e._)("span",{class:"token tag"},[(0,e._)("span",{class:"token tag"},[(0,e._)("span",{class:"token punctuation"},"<"),(0,e.Uk)("p")]),(0,e._)("span",{class:"token punctuation"},">")]),(0,e.Uk)("{{user.lastName}}"),(0,e._)("span",{class:"token tag"},[(0,e._)("span",{class:"token tag"},[(0,e._)("span",{class:"token punctuation"},"</"),(0,e.Uk)("p")]),(0,e._)("span",{class:"token punctuation"},">")]),(0,e.Uk)("\n  "),(0,e._)("span",{class:"token tag"},[(0,e._)("span",{class:"token tag"},[(0,e._)("span",{class:"token punctuation"},"<"),(0,e.Uk)("p")]),(0,e._)("span",{class:"token punctuation"},">")]),(0,e.Uk)("{{user.age}}"),(0,e._)("span",{class:"token tag"},[(0,e._)("span",{class:"token tag"},[(0,e._)("span",{class:"token punctuation"},"</"),(0,e.Uk)("p")]),(0,e._)("span",{class:"token punctuation"},">")]),(0,e.Uk)("\n}\n\n"),(0,e._)("span",{class:"token comment"},"\x3c!-- USING THE @let SYNTAX --\x3e"),(0,e.Uk)("\n@let unwrappedUser = user | async;\n"),(0,e._)("span",{class:"token tag"},[(0,e._)("span",{class:"token tag"},[(0,e._)("span",{class:"token punctuation"},"<"),(0,e.Uk)("p")]),(0,e._)("span",{class:"token punctuation"},">")]),(0,e.Uk)("{{unwrappedUser?.firstName}}"),(0,e._)("span",{class:"token tag"},[(0,e._)("span",{class:"token tag"},[(0,e._)("span",{class:"token punctuation"},"</"),(0,e.Uk)("p")]),(0,e._)("span",{class:"token punctuation"},">")]),(0,e.Uk)("\n"),(0,e._)("span",{class:"token tag"},[(0,e._)("span",{class:"token tag"},[(0,e._)("span",{class:"token punctuation"},"<"),(0,e.Uk)("p")]),(0,e._)("span",{class:"token punctuation"},">")]),(0,e.Uk)("{{unwrappedUser?.lastName}}"),(0,e._)("span",{class:"token tag"},[(0,e._)("span",{class:"token tag"},[(0,e._)("span",{class:"token punctuation"},"</"),(0,e.Uk)("p")]),(0,e._)("span",{class:"token punctuation"},">")]),(0,e.Uk)("\n"),(0,e._)("span",{class:"token tag"},[(0,e._)("span",{class:"token tag"},[(0,e._)("span",{class:"token punctuation"},"<"),(0,e.Uk)("p")]),(0,e._)("span",{class:"token punctuation"},">")]),(0,e.Uk)("{{unwrappedUser?.age}}"),(0,e._)("span",{class:"token tag"},[(0,e._)("span",{class:"token tag"},[(0,e._)("span",{class:"token punctuation"},"</"),(0,e.Uk)("p")]),(0,e._)("span",{class:"token punctuation"},">")]),(0,e.Uk)("\n")])]),(0,e._)("div",{class:"line-numbers","aria-hidden":"true"},[(0,e._)("div",{class:"line-number"}),(0,e._)("div",{class:"line-number"}),(0,e._)("div",{class:"line-number"}),(0,e._)("div",{class:"line-number"}),(0,e._)("div",{class:"line-number"}),(0,e._)("div",{class:"line-number"}),(0,e._)("div",{class:"line-number"}),(0,e._)("div",{class:"line-number"}),(0,e._)("div",{class:"line-number"}),(0,e._)("div",{class:"line-number"}),(0,e._)("div",{class:"line-number"}),(0,e._)("div",{class:"line-number"}),(0,e._)("div",{class:"line-number"}),(0,e._)("div",{class:"line-number"}),(0,e._)("div",{class:"line-number"}),(0,e._)("div",{class:"line-number"}),(0,e._)("div",{class:"line-number"})])],-1),Z=(0,e._)("div",{class:"language-typescript line-numbers-mode","data-ext":"ts"},[(0,e._)("pre",{class:"language-typescript"},[(0,e._)("code",null,[(0,e._)("span",{class:"token decorator"},[(0,e._)("span",{class:"token at operator"},"@"),(0,e._)("span",{class:"token function"},"Component")]),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n  selector"),(0,e._)("span",{class:"token operator"},":"),(0,e.Uk)(),(0,e._)("span",{class:"token string"},"'app-root'"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)("\n  imports"),(0,e._)("span",{class:"token operator"},":"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"["),(0,e.Uk)("AsyncPipe"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)("\n  templateUrl"),(0,e._)("span",{class:"token operator"},":"),(0,e.Uk)(),(0,e._)("span",{class:"token string"},"'./app.component.html'"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)("\n  styleUrl"),(0,e._)("span",{class:"token operator"},":"),(0,e.Uk)(),(0,e._)("span",{class:"token string"},"'./app.component.scss'"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token punctuation"},"}"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token keyword"},"export"),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"class"),(0,e.Uk)(),(0,e._)("span",{class:"token class-name"},"AppComponent"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n  user"),(0,e._)("span",{class:"token operator"},":"),(0,e.Uk)(" Observable"),(0,e._)("span",{class:"token operator"},"<"),(0,e.Uk)("User"),(0,e._)("span",{class:"token operator"},">"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"interval"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token number"},"1000"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"pipe"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token function"},"map"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("_ "),(0,e._)("span",{class:"token operator"},"=>"),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"new"),(0,e.Uk)(),(0,e._)("span",{class:"token class-name"},"User"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token string"},"'John'"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(),(0,e._)("span",{class:"token string"},"'Snow'"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"28"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n\n"),(0,e._)("span",{class:"token keyword"},"class"),(0,e.Uk)(),(0,e._)("span",{class:"token class-name"},"User"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n  "),(0,e._)("span",{class:"token function"},"constructor"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"public"),(0,e.Uk)(" firstName"),(0,e._)("span",{class:"token operator"},":"),(0,e.Uk)(),(0,e._)("span",{class:"token builtin"},"string"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"public"),(0,e.Uk)(" lastName"),(0,e._)("span",{class:"token operator"},":"),(0,e.Uk)(),(0,e._)("span",{class:"token builtin"},"string"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"public"),(0,e.Uk)(" age"),(0,e._)("span",{class:"token operator"},":"),(0,e.Uk)(),(0,e._)("span",{class:"token builtin"},"number"),(0,e.Uk)("\n  "),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n")])]),(0,e._)("div",{class:"highlight-lines"},[(0,e._)("br"),(0,e._)("div",{class:"highlight-line"}," "),(0,e._)("br"),(0,e._)("br"),(0,e._)("br"),(0,e._)("br"),(0,e._)("br"),(0,e._)("br"),(0,e._)("br"),(0,e._)("br"),(0,e._)("br"),(0,e._)("br"),(0,e._)("br"),(0,e._)("br"),(0,e._)("br"),(0,e._)("br"),(0,e._)("br")]),(0,e._)("div",{class:"line-numbers","aria-hidden":"true"},[(0,e._)("div",{class:"line-number"}),(0,e._)("div",{class:"line-number"}),(0,e._)("div",{class:"line-number"}),(0,e._)("div",{class:"line-number"}),(0,e._)("div",{class:"line-number"}),(0,e._)("div",{class:"line-number"}),(0,e._)("div",{class:"line-number"}),(0,e._)("div",{class:"line-number"}),(0,e._)("div",{class:"line-number"}),(0,e._)("div",{class:"line-number"}),(0,e._)("div",{class:"line-number"}),(0,e._)("div",{class:"line-number"}),(0,e._)("div",{class:"line-number"}),(0,e._)("div",{class:"line-number"}),(0,e._)("div",{class:"line-number"}),(0,e._)("div",{class:"line-number"}),(0,e._)("div",{class:"line-number"})])],-1),nn=(0,e.uE)('<p>Since no subscription is made, unsubscribing is not necessary. The async pipe takes care of it for us.</p><h2 id="summary" tabindex="-1"><a class="header-anchor" href="#summary" aria-hidden="true">#</a> Summary</h2><div class="custom-container tip"><p class="custom-container-title">Key Takeaways</p><ul><li>Unsubscribe or use the async pipe</li><li>Never nest subscribes, find the right operators instead</li></ul></div><p>Here is a table of the most commonly used operators.</p><table><thead><tr><th>Area</th><th>Operators</th></tr></thead><tbody><tr><td>Creation</td><td>from, of, fromEvent, interval</td></tr><tr><td>Filtering</td><td>filter, takeUntil, take, distinctUntilChanged</td></tr><tr><td>Transformation</td><td>switchMap, exhaustMap, concatMap, mergeMap, map</td></tr><tr><td>Combination</td><td>combineLatest, concat, merge, startWith, withLatestFrom, zip</td></tr><tr><td>Utility</td><td>tap, finalize, catchError</td></tr></tbody></table><p>There also exists two <code>Observable</code> constants: <code>NEVER</code> (emits neither values nor errors nor the completion notification) and <code>EMPTY</code> (emits no items and immediately emits a complete notification). <code>EMPTY</code> is quite useful as a return value of the <code>catchError</code> operator.</p>',6),sn={href:"https://rxjs.dev/operator-decision-tree",target:"_blank",rel:"noopener noreferrer"},an=(0,e.uE)('<h2 id="practical-work" tabindex="-1"><a class="header-anchor" href="#practical-work" aria-hidden="true">#</a> Practical work</h2><ol><li>In the <code>film-search.component.ts</code> file, stop subscribing to the search response and use an async pipe instead in the template. Don&#39;t forget to add the <code>AsyncPipe</code> to the <code>imports</code> array.</li><li>Even though it is not strictly necessary in those cases, unsubscribe from the login and register calls in the <code>LoginFormComponent</code> using the <code>takeUntilDestroyed</code> technique.</li></ol><h2 id="to-go-further" tabindex="-1"><a class="header-anchor" href="#to-go-further" aria-hidden="true">#</a> To go further</h2>',3),en={href:"https://angular.dev/ecosystem/rxjs-interop",target:"_blank",rel:"noopener noreferrer"},tn={},on=(0,a(3744).Z)(tn,[["render",function(n,s){const a=(0,e.up)("ExternalLinkIcon"),tn=(0,e.up)("CodeGroupItem"),on=(0,e.up)("CodeGroup");return(0,e.wg)(),(0,e.iD)("div",null,[t,(0,e._)("p",null,[(0,e._)("a",o,[(0,e.Uk)("RxJS"),(0,e.Wm)(a)]),(0,e.Uk)(" is a library for reactive programming using Observables. It makes it easier to compose asynchronous or callback-based code. It is part of the "),(0,e._)("a",p,[(0,e.Uk)("ReactiveX"),(0,e.Wm)(a)]),(0,e.Uk)(" collection of open-source libraries (RxJava, RxSwift, Rx.NET, RxScala...). They all share a very similar API, which means transferring Rx skills from one language to another is very easy.")]),i,(0,e._)("div",c,[l,(0,e._)("p",null,[(0,e.Uk)("This chapter is based on "),(0,e._)("a",r,[(0,e.Uk)("RxJS v7"),(0,e.Wm)(a)]),(0,e.Uk)(", the default version used by Angular 15.")])]),u,(0,e._)("ul",null,[(0,e._)("li",null,[(0,e.Uk)("interval ("),(0,e._)("a",k,[(0,e.Uk)("marble"),(0,e.Wm)(a)]),(0,e.Uk)(" / "),(0,e._)("a",d,[(0,e.Uk)("documentation"),(0,e.Wm)(a)]),(0,e.Uk)(")")])]),m,(0,e._)("ul",null,[(0,e._)("li",null,[(0,e.Uk)("promise transformation ("),(0,e._)("a",h,[(0,e.Uk)("marble"),(0,e.Wm)(a)]),(0,e.Uk)(" / "),(0,e._)("a",b,[(0,e.Uk)("documentation"),(0,e.Wm)(a)]),(0,e.Uk)(")")])]),v,(0,e._)("ul",null,[(0,e._)("li",null,[(0,e.Uk)("browser event transformation ("),(0,e._)("a",g,[(0,e.Uk)("documentation"),(0,e.Wm)(a)]),(0,e.Uk)(")")])]),_,(0,e._)("p",null,[(0,e.Uk)("Similar to the well known "),f,(0,e.Uk)(" function, the "),y,(0,e.Uk)(" operator ("),(0,e._)("a",U,[(0,e.Uk)("marble"),(0,e.Wm)(a)]),(0,e.Uk)(" / "),(0,e._)("a",w,[(0,e.Uk)("documentation"),(0,e.Wm)(a)]),(0,e.Uk)(") applies a projection to each value and emits that projection in the output "),x,(0,e.Uk)(".")]),T,E,O,(0,e._)("p",null,[(0,e.Uk)("Similar to the "),S,(0,e.Uk)(" function, the "),W,(0,e.Uk)(" operator ("),(0,e._)("a",R,[(0,e.Uk)("marble"),(0,e.Wm)(a)]),(0,e.Uk)(" / "),(0,e._)("a",j,[(0,e.Uk)("documentation"),(0,e.Wm)(a)]),(0,e.Uk)(") filters items emitted by the source Observable by only emitting those that satisfy a specified predicate.")]),M,(0,e._)("p",null,[(0,e.Uk)("This behaviour is not always the desired one. RxJS provides a "),N,(0,e.Uk)(" operator ("),(0,e._)("a",A,[(0,e.Uk)("documentation"),(0,e.Wm)(a)]),(0,e.Uk)(') to deal with the error in a "silent" way, meaning that it is the '),C,(0,e.Uk)(" callback and not the "),I,(0,e.Uk)(" one that is called.")]),H,(0,e._)("p",null,[(0,e.Uk)("Having to chain backend calls is quite common. For example, the user has just edited a resource and you want your page to display its updated details. Some backend do send back the details of the updated resource in the body of the edit call response. However, some just send back a 200 or 204 HTTP response without a body. This means that the edit call and detail call need be chained to update the UI. RxJS provides several operators to chain events in a declarative manner. We will use the "),F,(0,e.Uk)(" operator ("),(0,e._)("a",J,[(0,e.Uk)("documentation"),(0,e.Wm)(a)]),(0,e.Uk)(" / "),(0,e._)("a",P,[(0,e.Uk)("marble"),(0,e.Wm)(a)]),(0,e.Uk)(") in this case. You can try it in the Stackblitz below (click anywhere on the preview and see what happens in the console, click again and see how things change in the console).")]),z,D,L,Y,(0,e._)("p",null,[(0,e.Uk)("Another useful operator to combine calls is "),$,(0,e.Uk)(" ("),(0,e._)("a",G,[(0,e.Uk)("documentation"),(0,e.Wm)(a)]),(0,e.Uk)("). While "),q,(0,e.Uk)(" cancels the subscription to the previous projected Observable, exhaustMap ignores new events as long as the previous projected Observable hasn't completed.")]),X,(0,e.Wm)(on,null,{default:(0,e.w5)((()=>[(0,e.Wm)(tn,{title:"Component class"},{default:(0,e.w5)((()=>[Q])),_:1}),(0,e.Wm)(tn,{title:"Component template"},{default:(0,e.w5)((()=>[V])),_:1})])),_:1}),B,(0,e.Wm)(on,null,{default:(0,e.w5)((()=>[(0,e.Wm)(tn,{title:"Component template"},{default:(0,e.w5)((()=>[K])),_:1}),(0,e.Wm)(tn,{title:"Component class"},{default:(0,e.w5)((()=>[Z])),_:1})])),_:1}),nn,(0,e._)("p",null,[(0,e.Uk)("To help you decide which operator fits your use case, the RxJS documentation provides an "),(0,e._)("a",sn,[(0,e.Uk)("operator decision tree"),(0,e.Wm)(a)]),(0,e.Uk)(". It also helps with just discovering the many operators RxJS provides.")]),an,(0,e._)("p",null,[(0,e.Uk)("Angular provides helpers to interoperate between Rx and Signals. You will find the documentation "),(0,e._)("a",en,[(0,e.Uk)("here"),(0,e.Wm)(a)]),(0,e.Uk)(".")])])}]])},1323:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e=JSON.parse('{"key":"v-66e9a7bd","path":"/en/rxjs.html","title":"RxJS","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"The Observable","slug":"the-observable","link":"#the-observable","children":[]},{"level":2,"title":"Observable creation","slug":"observable-creation","link":"#observable-creation","children":[]},{"level":2,"title":"Filtering and mapping","slug":"filtering-and-mapping","link":"#filtering-and-mapping","children":[]},{"level":2,"title":"Error handling","slug":"error-handling","link":"#error-handling","children":[]},{"level":2,"title":"Stream composition","slug":"stream-composition","link":"#stream-composition","children":[]},{"level":2,"title":"Unsubscribing","slug":"unsubscribing","link":"#unsubscribing","children":[]},{"level":2,"title":"The async pipe","slug":"the-async-pipe","link":"#the-async-pipe","children":[]},{"level":2,"title":"Summary","slug":"summary","link":"#summary","children":[]},{"level":2,"title":"Practical work","slug":"practical-work","link":"#practical-work","children":[]},{"level":2,"title":"To go further","slug":"to-go-further","link":"#to-go-further","children":[]}],"git":{},"filePathRelative":"en/rxjs.md"}')}}]);