"use strict";(self.webpackChunkangular_training=self.webpackChunkangular_training||[]).push([[893],{3354:(e,n,s)=>{s.r(n),s.d(n,{default:()=>m});var a=s(6252),t=s(9589),p=s(7469);const i=(0,a.uE)('<h1 id="pipes" tabindex="-1"><a class="header-anchor" href="#pipes" aria-hidden="true">#</a> Pipes</h1><p>Les pipes sont des <strong>fonctions de transformation de données</strong> utilisables directement depuis le template afin de transformer les données à afficher au moment du binding. Ils sont intéressants de deux manières principales :</p><ul><li>ils ne nécessitent pas de modifier les données dans le composant pour qu&#39;elles s&#39;affichent de manière user-friendly</li><li>ils sont déclarés une seule fois et peuvent être réutilisés dans autant de composants que nécessaire car ils en sont indépendants</li></ul><h2 id="syntaxe" tabindex="-1"><a class="header-anchor" href="#syntaxe" aria-hidden="true">#</a> Syntaxe</h2><p>La syntaxe des pipes Angular est inspirée de celle du shell Unix</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>{{ user().lastName | uppercase  }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Des paramètres peuvent être passés aux pipes. Ils sont placés après le nom du pipe et séparés par des deux-points :</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>{{ user().registrationDate | date:&#39;dd/MM/yyyy&#39; }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>{{ user().registrationDate | date:&#39;dd/MM/yyyy hh:mm&#39;:&#39;UTC&#39; }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>{{ user().registrationDate | date:&#39;dd/MM/yyyy hh:mm&#39;:&#39;+0200&#39;:&#39;fr&#39; }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Les pipes peuvent être enchaînés :</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>{{ user().birthDate | date | uppercase }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="pipes-integres" tabindex="-1"><a class="header-anchor" href="#pipes-integres" aria-hidden="true">#</a> Pipes intégrés</h2>',11),l={href:"https://angular.dev/api?type=pipe",target:"_blank",rel:"noopener noreferrer"},o=(0,a.uE)('<ul><li><code>AsyncPipe</code> déballe une valeur d&#39;une primitive asynchrone</li><li><code>CurrencyPipe</code> transforme un nombre en une chaîne de caractère formatée avec la devise selon les règles de locale</li><li><code>DatePipe</code> formate une valeur de date selon les règles de locale</li><li><code>DecimalPipe</code> formate une valeur en fonction d&#39;option de formatage des décimales et des règles de locale</li><li><code>I18nPluralPipe</code> fait correspondre une valeur à une chaîne de caractère qui pluralise la valeur selon les règles de locale</li><li><code>I18nSelectPipe</code> sélecteur générique qui affiche la chaîne de caractère qui correspond à la valeur actuelle</li><li><code>JsonPipe</code> convertit une valeur en sa représentation au format JSON, utile pour le débogage</li><li><code>KeyValuePipe</code> transforme l&#39;objet ou la Map en un tableau de paires clé-valeur</li><li><code>LowerCasePipe</code> transforme le texte en minuscules</li><li><code>PercentPipe</code> transforme un nombre en une chaîne de caractères formatée avec en pourcentage, selon les règles de locale</li><li><code>SlicePipe</code> crée un nouveau tableau ou chaîne de caractère contenant un sous-ensemble (tranche) des éléments</li><li><code>TitleCasePipe</code> transforme le texte en casse de titre</li><li><code>UpperCasePipe</code> transforme le texte en majuscules</li></ul><div class="custom-container warning"><p class="custom-container-title">Import</p><p>Les pipes ne font pas partie des imports par défaut du composant depuis le passage aux standalone components. Vous devez faire l&#39;import vous-même en ajoutant la classe du pipe que vous souhaitez utiliser dans le template au <strong>tableau d&#39;imports</strong> du décorateur <code>@Component</code> du composant.</p></div><p><strong>Exercice : Formatez le prix (en EUR) et la date (&#39;EEEE dd MMMM y&#39;), tous deux en français</strong></p><iframe height="500" width="100%" src="https://stackblitz.com/fork/github/ocunidee/atpw-builtin-pipe/tree/master?ctl=1&amp;embed=1&amp;file=src/app/app.component.html&amp;hideNavigation=1&amp;title=Built-in%20pipes"></iframe><h2 id="custom-pipe" tabindex="-1"><a class="header-anchor" href="#custom-pipe" aria-hidden="true">#</a> Custom pipe</h2><p>Si les pipes intégrés ne couvrent pas un cas d&#39;utilisation que vous rencontrez, Angular vous donne la possibilité d&#39;en créer un personnalisé.</p><p>Pour créer un Pipe personnalisé, vous devez :</p><ul><li>créer une classe qui implémente l&#39;interface <code>PipeTransform</code></li><li>décorez-la avec le décorateur <code>@Pipe()</code></li></ul>',8),r={href:"https://angular.dev/cli/generate/pipe",target:"_blank",rel:"noopener noreferrer"},c=(0,a.uE)('<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>ng generate pipe <span class="token operator">&lt;</span>name<span class="token operator">&gt;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Il génère le fichier suivant :</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Pipe<span class="token punctuation">,</span> PipeTransform <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@angular/core&#39;</span>\n\n<span class="token decorator"><span class="token at operator">@</span><span class="token function">Pipe</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token string">&#39;demo&#39;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">DemoPipe</span> <span class="token keyword">implements</span> <span class="token class-name">PipeTransform</span> <span class="token punctuation">{</span>\n\n  <span class="token function">transform</span><span class="token punctuation">(</span>value<span class="token operator">:</span> <span class="token builtin">unknown</span><span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">unknown</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">unknown</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">null</span>\n  <span class="token punctuation">}</span>\n\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Le premier argument de la méthode <code>transform</code> est la valeur sur laquelle le pipe est appliqué, la méthode prend ensuite n&#39;importe quel nombre d&#39;arguments. Il est recommandé de typer tous les arguments ainsi que de préciser le type de retour.</p><p>Le nom du pipe doit être en lowerCamelCase. C&#39;est une bonne pratique de le faire commencer par les initiales de votre application, tout comme pour le sélecteur de vos composants.</p><p>Comme toute autre classe, les pipes peuvent bénéficier de l&#39;injection de dépendances. Il est possible d&#39;injecter un autre pipe par exemple. Ceci est particulièrement utile lorsqu&#39;un pipe intégré doit être utilisé dans toute l&#39;application avec les mêmes paramètres. Un pipe personnalisé peut servir de wrapper afin de simplifier l&#39;utilisation d&#39;un pipe intégré.</p><p>Dans l&#39;exemple suivant, le prix remisé est calculé en fonction d&#39;un taux de remise. Aucune donnée du catalogue dans le composant n&#39;est mutée pour afficher le nouveau prix.</p><iframe height="500" width="100%" src="https://stackblitz.com/fork/github/ocunidee/atpw-custom-pipe/tree/master?ctl=1&amp;embed=1&amp;file=src/app/discounted.pipe.ts&amp;hideNavigation=1&amp;title=Custom%20pipe"></iframe><h2 id="utiliser-un-pipe-en-dehors-d-un-template" tabindex="-1"><a class="header-anchor" href="#utiliser-un-pipe-en-dehors-d-un-template" aria-hidden="true">#</a> Utiliser un pipe en dehors d&#39;un template</h2><p>Il est également possible d&#39;utiliser des pipes dans une classe de composant en l&#39;injectant et en appelant sa méthode transform. Le pipe doit alors être ajouté aux providers du composant ou de l&#39;<em>ApplicationConfig</em>. Lorsqu&#39;un pipe n&#39;est pas utilisé dans le template, il n&#39;a pas besoin d&#39;être présent dans le tableau des imports du composant.</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Component<span class="token punctuation">,</span> inject<span class="token punctuation">,</span> signal <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@angular/core&#39;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> UpperCasePipe <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@angular/common&#39;</span>\n\n<span class="token decorator"><span class="token at operator">@</span><span class="token function">Component</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  selector<span class="token operator">:</span> <span class="token string">&#39;app-root&#39;</span><span class="token punctuation">,</span>\n  templateUrl<span class="token operator">:</span> <span class="token string">&#39;./app.component.html&#39;</span><span class="token punctuation">,</span>\n  styleUrls<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;./app.component.css&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  providers<span class="token operator">:</span> <span class="token punctuation">[</span> UpperCasePipe <span class="token punctuation">]</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AppComponent</span> <span class="token punctuation">{</span>\n  <span class="token keyword">private</span> <span class="token keyword">readonly</span> upperCasePipe <span class="token operator">=</span> <span class="token function">inject</span><span class="token punctuation">(</span>UpperCasePipe<span class="token punctuation">)</span>\n\n  <span class="token keyword">protected</span> <span class="token keyword">readonly</span> title <span class="token operator">=</span> <span class="token function">signal</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>upperCasePipe<span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">(</span><span class="token string">&#39;title&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="tp-format-du-score" tabindex="-1"><a class="header-anchor" href="#tp-format-du-score" aria-hidden="true">#</a> TP : Format du score</h2><ol><li>Créez un pipe <code>starRating</code> à l&#39;aide du CLI dans le dossier <code>app/pipes</code>.</li><li>Implémentez l&#39;intérieur de la méthode transform de sorte que le métascore d&#39;un film s&#39;affiche avec une note de ★ à cinq ★★★★★. Modifier la signature de la méthode transform pour qu&#39;elle soit plus spécifique à votre cas.</li><li>Utilisez ce pipe dans le template du <code>LoginFormComponent</code>.</li><li>Commitez</li></ol><details class="custom-container details"><summary>Résultat attendu</summary><p><img src="'+t+'" alt="Résultat visuel du TP sur les pipes 1"></p><p><img src="'+p+'" alt="Résultat visuel du TP sur les pipes 2"></p></details><h2 id="pour-aller-plus-loin" tabindex="-1"><a class="header-anchor" href="#pour-aller-plus-loin" aria-hidden="true">#</a> Pour aller plus loin</h2>',15),u={href:"https://medium.com/@ghoul.ahmed5/pure-vs-impure-pipe-in-angular-2152cf073e4d",target:"_blank",rel:"noopener noreferrer"},d={},m=(0,s(3744).Z)(d,[["render",function(e,n){const s=(0,a.up)("ExternalLinkIcon");return(0,a.wg)(),(0,a.iD)("div",null,[i,(0,a._)("p",null,[(0,a.Uk)("Angular fournit plus d'une "),(0,a._)("a",l,[(0,a.Uk)("douzaine de pipes intégrés"),(0,a.Wm)(s)]),(0,a.Uk)(" pour couvrir les cas d'utilisation courants. Voici leur liste complète :")]),o,(0,a._)("p",null,[(0,a.Uk)("Le CLI s'occupera de ces points pour nous via la "),(0,a._)("a",r,[(0,a.Uk)("commande suivante"),(0,a.Wm)(s)]),(0,a.Uk)(":")]),c,(0,a._)("p",null,[(0,a.Uk)("La différence entre les "),(0,a._)("a",u,[(0,a.Uk)("pipes purs et impurs"),(0,a.Wm)(s)])])])}]])},1889:(e,n,s)=>{s.r(n),s.d(n,{data:()=>a});const a=JSON.parse('{"key":"v-2f91e384","path":"/fr/pipes.html","title":"Pipes","lang":"fr-FR","frontmatter":{},"headers":[{"level":2,"title":"Syntaxe","slug":"syntaxe","link":"#syntaxe","children":[]},{"level":2,"title":"Pipes intégrés","slug":"pipes-integres","link":"#pipes-integres","children":[]},{"level":2,"title":"Custom pipe","slug":"custom-pipe","link":"#custom-pipe","children":[]},{"level":2,"title":"Utiliser un pipe en dehors d\'un template","slug":"utiliser-un-pipe-en-dehors-d-un-template","link":"#utiliser-un-pipe-en-dehors-d-un-template","children":[]},{"level":2,"title":"TP : Format du score","slug":"tp-format-du-score","link":"#tp-format-du-score","children":[]},{"level":2,"title":"Pour aller plus loin","slug":"pour-aller-plus-loin","link":"#pour-aller-plus-loin","children":[]}],"git":{},"filePathRelative":"fr/pipes.md"}')},9589:(e,n,s)=>{e.exports=s.p+"assets/img/visual-1.42504f6c.png"},7469:(e,n,s)=>{e.exports=s.p+"assets/img/visual-3.56850083.png"}}]);